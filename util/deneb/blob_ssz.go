// Code generated by fastssz. DO NOT EDIT.
// Hash: de9f94bcb5d3d2ce746168f711a65978af02622a7f75df86ae2bd7a37090c91f
// Version: 0.1.3
package deneb

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the BeaconBlockBlob object
func (b *BeaconBlockBlob) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the BeaconBlockBlob object to a target array
func (b *BeaconBlockBlob) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Blob'
	dst = append(dst, b.Blob[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the BeaconBlockBlob object
func (b *BeaconBlockBlob) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 131072 {
		return ssz.ErrSize
	}

	// Field (0) 'Blob'
	copy(b.Blob[:], buf[0:131072])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the BeaconBlockBlob object
func (b *BeaconBlockBlob) SizeSSZ() (size int) {
	size = 131072
	return
}

// HashTreeRoot ssz hashes the BeaconBlockBlob object
func (b *BeaconBlockBlob) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the BeaconBlockBlob object with a hasher
func (b *BeaconBlockBlob) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Blob'
	hh.PutBytes(b.Blob[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the BeaconBlockBlob object
func (b *BeaconBlockBlob) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(b)
}
